'''
строй гистограмму по площади и цене
посчиать rse, rmse

1. прямая регрессия
2. подогнанные значения и остатки
3.множественная линейная регрессия:
Задача: оценщики округа должны оценивать стоимость домов в целях обложения налогами.
Потребители недвижимости и профессионалы в этой области консультируются на популярных веб-сайтах,
чтобы удостовериться в справедливости цены. Цель состоит в том, чтобы предсказать продажную цену на основе
остальных переменных.
Вычислите метрические показатели регрессионной модели
4. Шаговая регрессия
5. Взвешенная регрессия
6. Представление фиктивные переменных (для задачи 3 ), диагностика модели
7. Перекрестная проверка
8. Отбор модели и шаговая регрессия
9. Взвешенная регрессия
10. Представление фиктивные переменных
11. Многоуровневые факторные переменные
12. Интерпретация уравнения регрессии
13. Проверка допущений: диагностика регрессии
14. Графики частных остатков и нелинейность
15.Нелинейная регрессия
'''

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
#линейная регрессия
from sklearn.linear_model import LinearRegression
#множественная лин регрессия
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
#взвешенная регрессия
import statsmodels.api as sm
from scipy import stats
from statistics import pvariance


# house = pd.read_csv("house_sales.csv", sep='\t')
# print(house.columns)
# newdf = house.loc[:, ['SalePrice', 'SqFtLot', 'Bedrooms']]
# print(newdf.head())
print("Линейная регрессия")
x = np.array([131, 120, 243, 80, 140, 130, 112, 116, 100]).reshape(-1,1) #площади домов
y = np.array([22000000, 15000000, 18000000, 35500000, 10100000, 40650000, 237890000, 60900000, 54000000]) #стоимости домов
model = LinearRegression()
#С помощью .fit() вычисляются оптимальные значение весов b₀ и b₁ y = b0 + b1x,
#используя существующие вход и выход (x и y) в качестве аргументов.

model.fit(x,y)
r_sq = model.score(x, y)
print('коэфициент детерминации R^2:', r_sq)
print('intercept: b0 ', model.intercept_)
print('slope:b1 ', model.coef_)

#создание точек для линии регрессии
x_range = np.linspace(x.min(), x.max(), 100).reshape(-1, 1)  # создаем 100 точек в диапазоне x
y_pred = model.predict(x_range) # 2. получаем предсказания (подгнанные значения) для созданных точек
'''
Остатки представляют собой вертикальное расстояние между каждой точкой данных и линией регрессии.
'''
#остатки
print("остатки")
for f in range (len(y)):
    print(y[f]-y_pred[f])

#создаем график
plt.figure(figsize=(10, 6))  # задаем размер графика
plt.scatter(x, y, color='blue', label='Исходные данные')  # отображаем исходные точки
plt.plot(x_range, y_pred, color='red', label='Линия регрессии')  # отображаем линию регрессии
plt.xlabel('Площадь дома (кв.м)')
plt.ylabel('Стоимость дома')
plt.title('Линейная регрессия стоимости дома от его площади')
plt.legend()  # отображаем легенду
plt.grid(True) # добавляем сетку для удобства восприятия
plt.show()

'''
Простая линейная регрессия: Использует одну независимую переменную (признак) для предсказания зависимой переменной.
Например: предсказание цены дома (y) на основе его площади (x).
Множественная линейная регрессия: Использует две или более независимых переменных (признаков) для предсказания зависимой переменной.
Например: предсказание цены дома (y) на основе его площади (x1), количества комнат (x2) и возраста (x3)
'''

#3. Множественная регрессия
print("\nМножественная регрессия")
data = {
    'Площадь': [131, 120, 243, 80, 140, 130, 112, 116, 100],
    'Количество_комнат': [3, 2, 4, 1, 3, 3, 2, 2, 2],
    'Возраст': [10, 15, 5, 20, 8, 7, 12, 18, 10],
    'Цена': [22000000, 15000000, 18000000, 35500000, 10100000, 40650000, 237890000, 60900000, 54000000]
}
df = pd.DataFrame(data)

X = df[['Площадь', 'Количество_комнат', 'Возраст']] # Матрица признаков
y = df['Цена'] # Целевая переменная

#разделение на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
#создание и обучение модели
model = LinearRegression()
model.fit(X_train, y_train)

#получение предсказаний
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

r2_train = r2_score(y_train, y_pred_train)
r2_test = r2_score(y_test, y_pred_test)
rmse_train = np.sqrt(mean_squared_error(y_train, y_pred_train)) #среднее квадратическое отклонение
rmse_test = np.sqrt(mean_squared_error(y_test, y_pred_test))

print("R2 на обучающей выборке:", r2_train)
print("R2 на тестовой выборке:", r2_test)
print("RMSE (среднее квадратическое отклонение) на обучающей выборке:", rmse_train)
print("RMSE на тестовой выборке:", rmse_test)
print('intercept: b0 ', model.intercept_)
print('slope: b1, b2, b3... ', model.coef_)

#прогнозирование для новых данных
new_data = np.array([[150, 3, 10], [120, 2, 15]]) #площадь, кол-во комнат, возраст
predicted_prices = model.predict(new_data)
print("Предсказанные цены для новых данных:", predicted_prices)

#Взвешенная регрессия
print("\nВзвешенная регрессия")
data = {
    'Площадь': [131, 120, 243, 80, 140, 130, 112, 116, 100],
    'Количество_комнат': [3, 2, 4, 1, 3, 3, 2, 2, 2],
    'Возраст': [10, 15, 5, 20, 8, 7, 12, 18, 10],
    'Надежность': [0.8, 0.9, 0.6, 0.7, 0.95, 0.9, 0.75, 0.85, 0.65],
    'Цена': [22000000, 15000000, 18000000, 35500000, 10100000, 40650000, 237890000, 60900000, 54000000]
}
df = pd.DataFrame(data)

#подготовка данных
X = df[['Площадь', 'Количество_комнат', 'Возраст']]
y = df['Цена']
weights = df['Надежность'] # Веса
X = sm.add_constant(X)  # Добавляем константу

#разделение данных
X_train, X_test, y_train, y_test, weights_train, weights_test = train_test_split(
    X, y, weights, test_size=0.2, random_state=42)

#обучение взвешенной регрессии
model_weighted = sm.WLS(y_train, X_train, weights=weights_train).fit()

#оценка модели
y_pred_test = model_weighted.predict(X_test)
r2 = r2_score(y_test, y_pred_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))

print("R-squared на тестовой выборке:", r2)
print("RMSE на тестовой выборке:", rmse)
